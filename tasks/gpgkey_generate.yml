---
- name: Check entropy state
  ansible.builtin.command: "cat /proc/sys/kernel/random/entropy_avail"
  changed_when: false
  register: entropy
- name: Entropy state
  ansible.builtin.debug:
    var: entropy

- name: Check entropy state
  ansible.builtin.command: "cat /proc/sys/kernel/random/entropy_avail"
  changed_when: false
  register: entropy2
- name: Entropy state
  ansible.builtin.debug:
    var: entropy2

- name: Ensure .gnupg config directory exists with right permissions
  ansible.builtin.file:
    dest: "{{ gpg_home }}/.gnupg"
    state: directory
    mode: "0700"
    owner: "{{ gpg_generator_user }}"

- name: Set default gpg options
  ansible.builtin.template:
    src: "{{ gpg_conf_file_template }}"
    dest: "{{ gpg_home }}/.gnupg/gpg.conf"
    mode: "0600"
    owner: "{{ gpg_generator_user }}"

- name: Write GPG passphrase to file
  ansible.builtin.copy:
    content: "{{ gpg_passphrase }}"
    dest: "{{ gpg_home + '/' + gpg_passphrase_file }}"
    mode: "0600"
    owner: "{{ gpg_generator_user }}"
  register: passphrase_file_created

- name: Import gpg21
  ansible.builtin.import_tasks: gpg21.yml
  when: ansible_distribution == 'Ubuntu' and ansible_distribution_major_version|int > 16

## Note: matching on realname or email doesn't allow to create multiple keys. alternative?
- name: Check existing secret key
  ansible.builtin.shell:
    cmd: |
      set -o pipefail
      gpg --batch --homedir {{ gpg_home }}/.gnupg --list-secret-keys | grep '{{ gpg_realname }}'
  args:
    executable: /bin/bash
  changed_when: false
  become: yes
  become_user: "{{ gpg_generator_user }}"
  register: gpgkeys
  no_log: "{{ gpg_no_log }}"
  failed_when: gpgkeys.rc > 1
- name: Debug | gpg keys
  ansible.builtin.debug:
    var: gpgkeys
    verbosity: 2
  no_log: "{{ gpg_no_log }}"

- name: Generate gpg key # noqa no-changed-when
  ansible.builtin.command: >
    gpg --batch --homedir "{{ gpg_home }}/.gnupg"
        --passphrase-file "{{ gpg_home + '/' + gpg_passphrase_file }}"
        --quick-generate-key "{{ gpg_uid }}"
        {{ gpg_algo }} default "{{ gpg_expire | default('10y') }}"
  args:
    chdir: "{{ gpg_home }}"
  become: yes
  become_user: "{{ gpg_generator_user }}"
  when: gpgkeys is defined and not gpgkeys.stdout
  register: genkey
  no_log: "{{ gpg_no_log }}"

- name: Debug | genkey
  ansible.builtin.debug:
    var: genkey
    verbosity: 1

- name: Get user gpg fingerprint
  ansible.builtin.shell: |
    set -o pipefail
    gpg --homedir {{ gpg_home }}/.gnupg --list-keys --keyid-format LONG {{ gpg_useremail }} | awk -F'[ /]' '/sub/ { print $5 }' | tee {{ gpg_home }}/{{ gpg_fingerprint }}
  args:
    executable: /bin/bash
    creates: "{{ gpg_home }}/{{ gpg_fingerprint }}"
  register: gpg_user_fingerprint
  become: yes
  become_user: "{{ gpg_generator_user }}"

- name: Get user armored public key
  ansible.builtin.command: >
    gpg --batch --homedir "{{ gpg_home }}/.gnupg"
        --output "{{ gpg_home }}/{{ gpg_pubkeyfileexport }}"
        --armor --export "{{ gpg_useremail }}"
  args:
    creates: "{{ gpg_home }}/{{ gpg_pubkeyfileexport }}"
  become: yes
  become_user: "{{ gpg_generator_user }}"

- name: Get user armored secret key
  ansible.builtin.command: >
    gpg --batch --homedir "{{ gpg_home }}/.gnupg"
        --passphrase-file "{{ gpg_home + '/' + gpg_passphrase_file }}"
        --output "{{ gpg_home }}/{{ gpg_privkeyfile }}"
        --armor --export-secret-key "{{ gpg_useremail }}"
  args:
    creates: "{{ gpg_home }}/{{ gpg_privkeyfile }}"
  become: yes
  become_user: "{{ gpg_generator_user }}"

- name: Debug | gpg_pull
  ansible.builtin.debug:
    var: gpg_pull
- name: Fetch files to orchestrator
  ansible.builtin.fetch:
    src: "{{ item }}"
    dest: "{{ gpg_pulldir }}/"
    flat: "yes"
  with_items:
  # - "{{ gpg_home }}/{{ gpg_privkeyfile }}"
  # - "{{ gpg_home }}/{{ gpg_pubkeyfile }}"
  - "{{ gpg_home }}/{{ gpg_pubkeyfileexport }}"
  - "{{ gpg_home }}/{{ gpg_fingerprint }}"
  when: gpg_pull is defined and gpg_pull

- name: Fetch privatekey file to orchestrator
  ansible.builtin.fetch:
    src: "{{ item }}"
    dest: "{{ gpg_pulldir }}/"
    flat: "yes"
  with_items:
  - "{{ gpg_home }}/{{ gpg_privkeyfile }}"
  when: gpg_pull is defined and gpg_pull and gpg_pull_privatekey is defined and gpg_pull_privatekey
